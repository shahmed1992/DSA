Complexity Analysis:
    1. How much time does this algorithm need to finish?
    2. How much space does this algo need to finish?

Big-O Notation:
    1. Big-O Notation gives an upper bound of the complexity in the worst case.
    2. Helping to quantify perf as the input size becomes arbitrarily large.

    n- The size of the input.

Complexities ordered in from smallest to largest
1. Constant Time: O(1)
2. Logarithmic Time: O(log(n))
3. Linear Time: O(n)
4. Linearithmic Time: O(nlog(n))
5. Quadric Time: O(n^2)
6. Cubic  Time: O(n^3)
7. Exponential Time: O(b^n), b>1
8. Factorial Time: O(n!)

Example-1:
    i=0
    while i<11:
        i+=1

    Has constant complexity: O(1)

Example-2:
    i=0                                     i=0
    while i < n:                            while i < n:
        i+=1                                    i+=1

    f(n) = n                                f(n) = n/3
    O(f(n)) = O(n)                          O(f(n)) = O(n)

