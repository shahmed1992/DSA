Complexity Analysis:
    1. How much time does this algorithm need to finish?
    2. How much space does this algo need to finish?

Big-O Notation:
    1. Big-O Notation gives an upper bound of the complexity in the worst case.
    2. Helping to quantify perf as the input size becomes arbitrarily large.

    n- The size of the input.

Complexities ordered in from smallest to largest
1. Constant Time: O(1)
2. Logarithmic Time: O(log(n))
3. Linear Time: O(n)
4. Linearithmic Time: O(nlog(n))
5. Quadric Time: O(n^2)
6. Cubic  Time: O(n^3)
7. Exponential Time: O(b^n), b>1
8. Factorial Time: O(n!)

Example-1:
    i=0
    while i<11:
        i+=1

    Has constant complexity: O(1)

Example-2:
    i=0                                     i=0
    while i < n:                            while i < n:
        i+=1                                    i+=1

    f(n) = n                                f(n) = n/3
    O(f(n)) = O(n)                          O(f(n)) = O(n)

Example-3:
    for i in range(n):
        for j in range(n):
            print(i,j)
    f(n) = n*n = n^2, O(f(n)) =O(n^2)

Example-4:
    low = 0
    high = n-1
    while low<=high:
        mid = (low+high)/2
        if array[mid]==value:
            return mid
        elif array[mid]<value:
            low = mid+1
        elif array[mid]> value:
            high = mid-1
    return -1

    Complexity: O(log(n))

Example-5:
    i=0
    while i<3*n:
        j=10
        while j<=50:
            j=j+1
        j=0
        while j<n*n*n:
            j = j+2
        i=i+1

    f(n) = 3n*(40 + n^3/2) = 3n/40 + 3n^4/2
        O(f(n)) = O(n^4)

Other examples:
Finding all subsets of a set: O(2^n)
Finding all permutations of a string: O(n!)
Sorting using mergesort: O(nlogn)
Iterating over all the cells in a matrix of a size n by m: O(nm)

